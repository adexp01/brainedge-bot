// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum LanguageEnum {
  EN
  FR
  ES
}

enum SubjectEnum {
  BLOCKCHAIN
  FINANCE
  LIFE_SKILLS
  MACHINE_LEARNING
}

enum TransactionMethodEnum {
  DAILY_REWARD
  CLICKER_REWARD
  QUIZ_REWARD
  DAILY_QUIZ_REWARD
}

enum LeaderboardLevel {
  Learner
  Apprentice
  Analyst
  Scholar
  Mentor
  Advisor
  Professor
  Innovator
  Chancellor
  Visionary
  Mastermind
}

// Models

model Subject {
  id            String       @id @default(cuid())
  subject       SubjectEnum
  language      LanguageEnum
  title         String
  subTitle      String
  description   String
  thumbnailUrl  String
  tracks        Track[]
  conceptMapUrl String
}

model Track {
  id              String       @id @default(cuid())
  subject         SubjectEnum
  language        LanguageEnum
  title           String
  subTitle        String
  description     String
  thumbnailUrl    String
  courses         Course[]
  courseOrderById String[]
  Subject         Subject?     @relation(fields: [subjectId], references: [id])
  subjectId       String?
}

model Course {
  id           String       @id @default(cuid())
  language     LanguageEnum
  title        String
  subTitle     String
  description  String
  thumbnailUrl String
  scormUrl     String
  lessonReward Int
  Track        Track?       @relation(fields: [trackId], references: [id])
  trackId      String?
}

model BrainPointBalance {
  id                   String    @id @default(cuid())
  user                 AppUser   @relation(fields: [userId], references: [id])
  userId               String    @unique
  balance              Int       @default(0)
  dailyRewardClaimedAt DateTime?
  dailyRewardStreak    Int       @default(0)
  maxDailyRewardStreak Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model BrainPointTransaction {
  id        String                @id @default(cuid())
  user      AppUser               @relation(fields: [userId], references: [id])
  userId    String
  amount    Int
  method    TransactionMethodEnum
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model DailyQuiz {
  id        String   @id @default(cuid())
  question  String
  answers   String[]
  correct   Int
  reward    Int
  createdAt DateTime @default(now())
}

model AppUser {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  privyId        String   @unique
  walletSigner   String   @unique
  walletAbstract String?  @unique
  admin          Boolean  @default(false)

  email          String? @unique
  google         String? @unique
  twitter        String? @unique
  discord        String? @unique
  telegram       String? @unique
  walletExternal String? @unique

  telegramCode  String?      @default("")
  clickerUserId String?      @unique
  clickerUser   ClickerUser? @relation(fields: [clickerUserId], references: [id])

  loginStreak Int     @default(0)
  loginToday  Boolean @default(false)

  username          String? @unique
  usernameChanged   Boolean @default(false)
  introVideoWatched Boolean @default(false)
  profileImageUrl   String?
  bio               String?

  pendingLearn     Int @default(10)
  leaderboardScore Int @default(0)
  leaderboardRank  Int @default(0)

  referralCode     String  @unique @default(cuid())
  referredByUserId String?
  referralCount    Int     @default(0)

  banned                Boolean                 @default(false)
  bannedReason          String?
  BrainPointBalance     BrainPointBalance?
  BrainPointTransaction BrainPointTransaction[]

  CourseCompletion CourseCompletion[]

  LessonCompletion LessonCompletion[]
}

model CourseCompletion {
  id               String             @id @default(cuid())
  user             AppUser            @relation(fields: [userId], references: [id])
  userId           String
  courseId         String
  title            String             @default("")
  progress         Float
  completed        Boolean            @default(false)
  earned           Int                @default(0)
  createdAt        DateTime           @default(now())
  LessonCompletion LessonCompletion[]
}

model LessonCompletion {
  id                 String            @id @default(cuid())
  user               AppUser           @relation(fields: [userId], references: [id])
  userId             String
  courseCompletion   CourseCompletion? @relation(fields: [courseCompletionId], references: [id])
  courseCompletionId String?
  lessonId           String
  progress           Float
  score              Float
  completed          Boolean           @default(false)
  createdAt          DateTime          @default(now())
}

model WhiteList {
  id                String    @id @default(cuid())
  telegramId        String    @unique
  twitterConfirmAt  DateTime?
  telegramConfirmAt DateTime?
  completed         Boolean   @default(false)
  createdAt         DateTime  @default(now())
}

model ClickerUser {
  id            String  @id @default(cuid())
  name          String
  username      String?
  photo_url     String?
  isPremium     Boolean @default(false)
  banned        Boolean @default(false)
  bannedMessage String? @default("")

  formattedWallet String? @default("")

  balance       Int @default(0)
  weeklyBalance Int @default(0)
  dailyBalance  Int @default(0)
  hat           Int @default(0)
  weeklyHat     Int @default(0)

  dailyTaskCompletion Int @default(0)
  heart               Int @default(5)

  lowPopLimit     Int @default(2)
  brainSlateLimit Int @default(2)
  smileQuestLimit Int @default(2)

  tapingGuru        Int       @default(4)
  tapingGuruEndDate DateTime?
  tapingGuruTimeOut DateTime?
  fullTank          Int       @default(2)
  fullTankTimeOut   DateTime?

  telegramSubscribed Boolean @default(false)
  telegramTaskStart  Boolean @default(false)

  multiTapLevel           Int @default(1)
  multiTapUpgradeCount    Int @default(0)
  EnergyLimitLevel        Int @default(1)
  EnergyLimitUpgradeCount Int @default(0)
  RechargingSpeedLevel    Int @default(1)

  LeaderboardLevel     LeaderboardLevel @default(Learner)
  dailyRewardStreak    Int              @default(0)
  dailyRewardClaimedAt DateTime?

  referralCode     String  @unique @default(cuid())
  referredByUserId String?

  currentEnergy   Int      @default(1000)
  maxEnergy       Int      @default(1000)
  energyUpdatedAt DateTime @default(now())

  friendRewardClaimed Int @default(0)

  friends3RewardClaimed   Boolean @default(false)
  friends7RewardClaimed   Boolean @default(false)
  friends15RewardClaimed  Boolean @default(false)
  friends50RewardClaimed  Boolean @default(false)
  friends100RewardClaimed Int     @default(0)

  createdAt                 DateTime                    @default(now())
  ClickerUserTaskCompletion ClickerUserTaskCompletion[]

  AppUser AppUser?

  @@index([username])
  @@index([dailyRewardStreak])
  @@index([dailyRewardClaimedAt])
  @@index([referralCode])
  @@index([referredByUserId])
}

model AdminUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
}

model AirdropItems {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
}

model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  link        String
  description String
  reward      Int
  icon        String
  daily       Boolean  @default(false)
  partner     Boolean  @default(false)

  taskCompletions ClickerUserTaskCompletion[]
}

model ClickerUserTaskCompletion {
  clickerUserId String
  taskId        String
  started       Boolean   @default(false)
  completedAt   DateTime?

  // Relations
  clickerUser ClickerUser @relation(fields: [clickerUserId], references: [id])
  task        Task        @relation(fields: [taskId], references: [id])

  @@id([clickerUserId, taskId]) // Composite primary key
}

model DailyReward {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bp        Int?
  hat       Int?
  order     Int      @unique
}
